q1 .Arrays to LL
// class Node {
//     public int value;
//     public Node next;

//     public Node(int data,Node next){
//         this.value=data;
//         this.next=next;
//     }

//     public Node(int data){
//         this.value=data;
//         this.next=null;
//     }

    
// }

public class Solution {
    public static Node constructLL(int []arr) {
        // Write your code here

        Node head=new Node(arr[0],null);
        Node mover=head;
        for(int i=1;i<arr.length;i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;

        }

        return head;
    }
}


q2. Length of a linked list 
/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;
    
     Node()
     {
         this.data = 0;
         this.next = null;
     }
    
     Node(int data)
     {
         this.data = data;
         this.next = null;
     }
    
     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 }

 *****************************************************************/

public class Solution {
    public static int length(Node head){
        //Your code goes here
        Node move=head;
        int count =0;

        while(move!=null){
            count++;
            move=move.next;
        }


        return count;
    }
}


q3. search in a linked list 
public static int searchInLinkedList(Node head, int k)
    {
        // Write Your Code Here.
        Node move=head;

        while (move!=null) {
            if(move.data==k){
                return 1;
            }

            move=move.next;
            
        }


        return 0;
    }


q4. delete a node in the linked list 
public void deleteNode(ListNode node) {
        // using two pointers approach
        ListNode pt1 = node;
        ListNode pt2 = node;
        pt2 = pt2.next;

        while (pt2 != null) {
            pt1.val = pt2.val;
            if (pt2.next == null) {
                break;
            }
            pt1 = pt2;
            pt2 = pt2.next;
        }

        pt1.next=null;
        

    }



q5 . insert in a new linked list
 //Function to insert a node at the beginning of the linked list.
    Node insertAtBeginning(Node head, int x)
    {
        if(head==null){
            return new Node (x);
        }
        // code here
        Node temp=new Node(x);
        temp.next=head;
        return temp;
    }
    
    //Function to insert a node at the end of the linked list.
    Node insertAtEnd(Node head, int x)
    {
        if(head==null){
            return new Node (x);
        }
        // code here
        Node mov=head;
        
        while(mov.next!=null){
            
            mov=mov.next;
            
        }
        Node temp=new Node(x);
        temp.next=null;
        mov.next=temp;
        return head; 
    }



q6. middle of linked list
class Solution {
    public ListNode middleNode(ListNode head) {
        int count=0;
        ListNode temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        int mid=(count/2)+1;
        temp=head;
        while(temp!=null){
            mid--;
            if(mid==0){
                return temp;
            }
            temp=temp.next;
        }


        return temp;
        
    }
}

torto and haire algo
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null ){
            slow=slow.next;
            fast=fast.next.next;
        }

        return slow;
        
    }
}


q7. reverse a linked list
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode temp=head;
        ListNode prev=null;
        ListNode front;
        while(temp!=null){
            // first step store the temp.next for next round
            front=temp.next;
            // now allter the link of temp
            temp.next=prev;
            // for next round prev would be temp
            prev=temp;
            // and temp would be front
            temp=front;


        }

        return prev;

        
    }
}


q8. even and odd index seggregrate in LL
class Solution {
    public ListNode oddEvenList(ListNode head) {
        // if list is empty or have single element then just return head
        if(head==null || head.next==null){
            return head;
        }
        // odd list link
        ListNode odd=head;
        // even list link
        ListNode even=head.next;
        // even head list link
        ListNode evenHead=head.next;
        // odd tr always remain behind the even so even can be conditonal factor
        while(even !=null && even.next!=null){
            // joining the odd list 
            odd.next=odd.next.next;
            // joining the even list
            even.next=even.next.next;
            // move to next odd elem
            odd=odd.next;
            // move to next even elem
            even=even.next;
        }
        // merge the odd list to even list 
        odd.next=evenHead;
        return head;
    }
}


q9. detecting a loop in LL
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return true;
            }
        }

        return false;
        
    }
}


q10. merge two sorted list 
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // h1 heads to the list1
        ListNode h1 = list1;
        // h2 heads to the list 2
        ListNode h2 = list2;
        // creating a dummy node
        ListNode dummy = new ListNode(-1, null);
        // temp points to dummy
        ListNode temp = dummy;
        // both should have left nodes
        while (h1 != null && h2 != null) {
            if (h1.val > h2.val) {
                // connecting nodes
                temp.next = h2;
                temp = h2;
                h2 = h2.next;

            } else {
                // h1<=h2
                temp.next = h1;
                temp = h1;
                h1 = h1.next;
            }
        }
        // left nodes for h1
        if (h1 != null) {
            temp.next = h1;
        }
        // left nodes for h2
        if (h2 != null) {
            temp.next = h2;
        }

        // return the head
        return dummy.next;

    }
}


q11. sort linked list 
class Solution {
    public ListNode sortList(ListNode head) {
        // we will use merge sort for this question to get optimal solution and sorting linked list 
        return mergeSort(head);
        
    }
    
    // return the head of the sorted linked list
    public ListNode mergeSort(ListNode head){
        // if head is null or or it is the single element end case 
        if(head==null || head.next==null){
            return head;
        }
        // finding the first mid of LL
        ListNode midNode=midNode(head);
        // head of left linked list
        ListNode leftHead=head;
        // head of right linked list 
        ListNode rightHead=midNode.next;
        midNode.next=null;
        // sorting the left LL and getting its head 
        ListNode leftList=mergeSort(leftHead);
        // sorting the right LL and getting its head
        ListNode rightList=mergeSort(rightHead);
        
        // return  the merge list from the left sorted LL and right sorted LL
        return mergeList(leftList,rightList);
    }
    
    // merge two sorted list 
    public ListNode mergeList(ListNode l1,ListNode l2){
        ListNode h1=l1;
        ListNode h2=l2;
        // creating a dummy node 
        ListNode dummy=new ListNode(-1,null);
        // temp points to dummy node 
        ListNode temp=dummy;
        // atleast both list must have some nodes
        while(h1!=null && h2!=null){

            if(h1.val > h2.val){
                temp.next=h2;
                temp=h2;
                h2=h2.next;
            }else{
                // h1.val <= h2.val
                temp.next=h1;
                temp=h1;
                h1=h1.next;
            }
        }
        // h1 have some left nodes
        if(h1!=null){
            temp.next=h1;
        }
        // h2 have some left nodes 
        if(h2!=null){
            temp.next=h2;
        }

        //  return the head of merge sorted list 
        return dummy.next;
    }
    // using the torto and hare algo 
    public ListNode midNode(ListNode head){
        // slow by 1 
        // fast by 2 
        ListNode slow=head;
        // to get the first mid elem use head.next 
        // otherwise for second use head only
        ListNode fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}


q12. reversing the linked list in k groups
class Solution {
    // reverse the Linked List
    public ListNode reverse(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        ListNode front = null;
        while (temp != null) {
            front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }

        return prev;

    }

    // finding the k the element of linked list
    public ListNode findkNode(ListNode head, int k) {
        ListNode temp = head;
        int count = 0;
        while (temp != null) {
            count++;
            if (count == k) {
                break;
            }
            temp = temp.next;
        }

        return temp;

    }

    public ListNode reverseKGroup(ListNode head, int k) {
        // it heads to the forst element of the group
        ListNode temp = head;
        // points to the last element of last reversed group
        ListNode prevTemp = null;
        // points to the first element of next group that going to be reversed
        ListNode nextTemp = null;

        while (temp != null) {
            // first find the k the element
            // it heads to the last element of the group
            ListNode kNode = findkNode(temp, k);
            // k th element is null
            // then group is not possible to reverse
            if (kNode == null) {
                // in case if the main list length is greater than k then surely we have last
                // unlinked reversed group
                if (prevTemp != null) {
                    prevTemp.next = temp;
                }
                break;
            }
            // stroing the node of Knode for temp jump
            nextTemp = kNode.next;
            // linked broken so group can act as seprated linked list
            kNode.next = null;

            // reversing the list
            reverse(temp);

            // if we have reversed the first group we nned to change the head of main linked
            // list
            if (temp == head) {
                head = kNode;
            } else {
                // joing the last reversed group to the new reversed group
                prevTemp.next = kNode;
            }

            // storing the last element of the current group
            prevTemp = temp;
            // move to head of next group
            temp = nextTemp;

        }

        return head;
    }

}



q13.  rotate linked list 
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        // first we found the length of LL and reach at the the plast points to last
        // last node 
        ListNode last = head;
        int len = 0;

        while (last != null) {
            len++;
            if (last.next == null) {
                break;
            }
            last = last.next;
        }

        // if len 0 return null
        if (len == 0) {
            return head;
        }

        // basically after len rotation u get the same LL so k%len would be thenumber of
        // rotation
        // from observation len - k%len used to find the last element of the rotated
        // Linked list
        int round = len - k % len;

        // temp points to the last element of rotated list
        ListNode temp = head;
        while (temp != null) {
            round--;
            if (round == 0) {
                break;
            }
            temp = temp.next;
        }
        // make the last element of current ll to the head of current ll
        last.next = head;
        // head of rotated ll
        head = temp.next;
        // breka the link
        temp.next = null;

        return head;

    }
}

q14. detect head of a loop
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                slow = head;
                while (slow != fast) {
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }

        }

        return null;

    }
}


q15. pallindrome check
class Solution {

    // reversing the linked list
    public ListNode reverse(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        ListNode front;
        while (temp != null) {
            front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }

        return prev;
    }

    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        // middle element of Linked List
        // for even we need to return m1 so we reach at second last element
        // (fast.next.next)
        // for odd reach at the last element (fast.next)
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode newHead = reverse(slow.next);
        // head of first array
        ListNode first = head;
        // head of second array
        ListNode second = newHead;

        // compare rem always second will reach at null
        while (second != null) {
            if (first.val != second.val) {
                // return to prev conditions
                reverse(newHead);
                return false;
            }
            first = first.next;
            second = second.next;
        }

        // return to prev condtions
        reverse(newHead);
        return true;
    }
}



q16. deleting n th node from end 
approach 1:
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // coutning the length of linked list
        int count = 0;
        ListNode temp = head;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        // if n == length that menas we need to delete head node
        if (n == count) {
            head = head.next;
            return head;
        }
        // finding the one before node before the deletingNode
        int res = count - n;
        temp = head;
        while (temp != null) {
            res--;
            // found the pred of deleting node
            if (res == 0) {
                break;
            }
            temp = temp.next;
        }
        // node links changes
        temp.next = temp.next.next;
        return head;

    }
}


approach 2:
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // fast and slow two ptr pointing to same node
        ListNode fast = head;
        ListNode slow = head;
        int count = n;
        // make the fast ptr to n moves sp that we can get move slow n th node from last
        // node
        for (int i = 0; i < count; i++) {
            fast = fast.next;
        }
        // fast null means n equal to length of list hence want to delete head node
        if (fast == null) {
            return slow.next;
        }
        // move the fast node and slow node by 1 simultaneoulsy by 1 until fast reach at
        // the last node
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        // altering the links of nodes
        slow.next = slow.next.next;
        return head;

    }
}


q17. deleting the middle node 
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        // we follow the torto and hare algo
        ListNode fast=head;
        ListNode slow=head;
        // head will the the middle element [LL length of 0 and 1]
        if(head==null || head.next==null){
            return null;
        }
        // make the fast move his move as per torto hare move keeping slow not movable for only one move
        fast=fast.next.next;
        // normal torto and hare algo
        // slow points to node before the middle node 
        // for even slow points to m1 
        // for odd length fast points to the last node of LL
        // for even length fast points to the null of LL
        while(fast!=null && fast.next!=null ){
            slow=slow.next;
            fast=fast.next.next;
        }
        // changing the linking of linked list 
        slow.next=slow.next.next;
        return head;
        
    }
}


q18. add two numbers in two linked list 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // head1 head of linked list
        ListNode head1=l1;
        // head2 head of liked list
        ListNode head2=l2;
        // dummy node
        ListNode dummyNode=new ListNode(-1);
        // current node
        ListNode currNode=dummyNode;
        // carry 
        int carry=0;
        // traversal untill both the list are traversed
        while(head1!=null || head2!=null){
            // adding carry into sum
            int sum=carry;
            if(head1!=null){
                // add head1 value
                sum+=head1.val;
                head1=head1.next;
            }
            if(head2!=null){
                // add head2 value
                sum+=head2.val;
                head2=head2.next;
            }
            
            // new node
            ListNode newNode=new ListNode(sum%10);
            carry=sum/10;
            currNode.next=newNode;
            currNode=currNode.next;
        }
        // check for any carry exhist 
        if(carry!=0){
            ListNode newNode=new ListNode(carry);
            currNode.next=newNode;
            currNode=currNode.next;
        }

        // head node of answer node
        return dummyNode.next;
    }
}


q19. find intersection

Approach 1 : 
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // if any list is empty they never intersect 
        if(headA==null || headB==null){
            return null;
        }
        // for list A finding length
        ListNode temp1=headA;
        int lenA=0;
        while(temp1!=null){
            lenA++;
            temp1=temp1.next;
        }
        // for list B finding length
        ListNode temp2=headB;
        int lenB=0;
        while(temp2!=null){
            lenB++;
            temp2=temp2.next;
        }
        
        // list A is greater than B
        if(lenA>lenB){
            return findCross(headB,headA,lenA-lenB);
            
        }else{
            // list B is greater than A
            return findCross(headA,headB,lenB-lenA);
        }
        
    }
    
    // function moves the larger List to equal point in smalller list
    public ListNode findCross(ListNode small,ListNode large,int distance){
        ListNode temp1=small;
        ListNode temp2=large;
        // moving the large List head element to the same vertical line of small List head
        while(distance>0){
            distance--;
            temp2=temp2.next;
        }
        // checking untill we got the intersection or null (no intersection)
        while(temp1!=temp2){
            temp1=temp1.next;
            temp2=temp2.next;
        }

        return temp1;
    }
}


Approach 2:
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode temp1=headA;
        ListNode temp2=headB;
        //if any of the list got null return null
        if(temp1==null || temp2==null){
            return null;
        }
        // if temp1 == temp 2 inditially means headA and headB are pointing to same linked list 
        while(temp1!=temp2){
            // move ahead
            temp1=temp1.next;
            temp2=temp2.next;
            // intersection point
            if(temp1==temp2){
                return temp1;
            }
            // assume LL A < LL B
            // temp2 will take more steps than temp1
            // move temp1 to headB to complete extra steps by temp2
            if(temp1==null){
                temp1=headB;
            }
            // temp1 has completed the extra step so vertically temp1 and temp2 should point same 
            if(temp2==null){
                temp2=headA;
            }

        }
        // only one LL is there both ptr points to same LL
        return temp1;
    }
}

